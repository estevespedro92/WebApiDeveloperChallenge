<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApiDeveloperChallenge</name>
    </assembly>
    <members>
        <member name="M:WebApiDeveloperChallenge.Common.Attributes.ModelValidationAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Check model validation
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Extensions.ClaimsPrincipalExtensions.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get name identifier claim value
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Extensions.ExceptionMiddlwareExtensions.ConfigureCustomExceptionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Add custom exception middlware
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Extensions.ServiceCollectionExtension.EnableSwaggerWithDefaultSettings(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
              Enable swagger with default settings
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Extensions.ServiceCollectionExtension.EnableJwtTokenAuthentification(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
              Enable JWT token authentification
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:WebApiDeveloperChallenge.Common.Interfaces.IEntity">
            <summary>
            Interface from key entity
            </summary>
        </member>
        <member name="T:WebApiDeveloperChallenge.Common.Interfaces.IRepository`1">
            <summary>
            Interface from default repository methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:WebApiDeveloperChallenge.Common.Interfaces.IUserIdEntity">
            <summary>
            Interface from userId entity
            </summary>
        </member>
        <member name="T:WebApiDeveloperChallenge.Common.Interfaces.IUserRepository`1">
            <summary>
              Interface from default repository methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Interfaces.IUserRepository`1.GetWithoutUserId(System.Guid)">
            <summary>
            Get data without check user id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Middlewares.ExceptionMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Return formatted exception 
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Common.Middlewares.ExceptionMiddleware.GetMessageFromException(System.Exception)">
            <summary>
            Get specific message from exception
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.BaseController`3.Get">
            <summary>
              Get list element
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.BaseController`3.Get(System.Guid)">
            <summary>
              Get element
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.BaseController`3.Put(System.Guid,`1)">
            <summary>
              Update element
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.BaseController`3.Post(`1)">
            <summary>
              Add new element
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.BaseController`3.Delete(System.Guid)">
            <summary>
              Delete element
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.BaseController`3.CheckUserIdPermission(System.Guid)">
            <summary>
              Check if changes are made by data user
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.ContactsController.Get(System.Boolean)">
            <summary>
              Get lists from contact (from user)
            </summary>
            <param name="isSkillsIncluded">Indicate if skills must be returned</param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.ContactsController.Get(System.Guid,System.Boolean)">
            <summary>
              Get contact (from user)
            </summary>
            <param name="id"></param>
            <param name="isSkillsIncluded">Indicate if skills must be returned</param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.ContactsController.Put(System.Guid,WebApiDeveloperChallenge.Representations.ContactSkillSimplifiedRepresentation)">
            <summary>
              Update contact (from user)
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.ContactsController.Post(WebApiDeveloperChallenge.Representations.ContactSkillSimplifiedRepresentation)">
            <summary>
              Add contact
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.ContactsController.Delete(System.Guid)">
            <summary>
              Delete contact
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.ContactsController.CheckUserIdPermission(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
              Check if changes are made by data user
            </summary>
            <param name="id"></param>
            <param name="skillIds"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Controllers.UserController.GetTokenAsync(System.String,System.String)">
            <summary>
            Get Token from user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiDeveloperChallenge.Models.ContactsContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Override SaveChangesAsync to add UserId
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
